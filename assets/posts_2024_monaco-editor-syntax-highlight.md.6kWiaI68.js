import{_ as t,c as e,o,U as r}from"./chunks/framework.I0qYP7JU.js";const b=JSON.parse('{"title":"Monaco Editor在Web IDE中高亮的一些问题","description":"monaco editor的语言支持使用的是内置的[Monarch],vscode使用的是Textmate","frontmatter":{"title":"Monaco Editor在Web IDE中高亮的一些问题","author":"welpher.yu","date":"2024-01-29T11:47:11.000Z","tags":["monaco editor","textmate","编辑器"],"categories":["web前端"],"description":"monaco editor的语言支持使用的是内置的[Monarch],vscode使用的是Textmate"},"headers":[],"relativePath":"posts/2024/monaco-editor-syntax-highlight.md","filePath":"posts/2024/monaco-editor-syntax-highlight.md"}'),a={name:"posts/2024/monaco-editor-syntax-highlight.md"},d=r('<h2 id="_1、monaco-editor中的语法高亮" tabindex="-1">1、Monaco Editor中的语法高亮 <a class="header-anchor" href="#_1、monaco-editor中的语法高亮" aria-label="Permalink to &quot;1、Monaco Editor中的语法高亮&quot;">​</a></h2><p>monaco editor的语言支持使用的是内置的<a href="https://microsoft.github.io/monaco-editor/monarch.html" target="_blank" rel="noreferrer">Monarch</a>，要用TextMate，也是给了解释怎么做， <a href="https://github.com/Microsoft/monaco-editor#faq" target="_blank" rel="noreferrer">Why doesn&#39;t the editor support TextMate grammars?</a></p><blockquote><p>Please see <a href="https://github.com/bolinfest/monaco-tm" target="_blank" rel="noreferrer">https://github.com/bolinfest/monaco-tm</a> which puts together monaco-editor, vscode-oniguruma and vscode-textmate to get TM grammar support in the editor.</p></blockquote><p>主要就是因为 Textmate 语法解析依赖的 Oniguruma 是一个 C 语言下的解析功能，VSCode 可以使用 node 环境来调用原生的模块，但是在 web 环境下无法实现，即使通过 asm.js 转换后，性能依然会有 100-1000 倍的损失（16年9月的说明，目前未测试），而且 IE 不支持~~~ 语言的支持也只有通过 worker 的 js ts html css json 这些。但是业内更通用、生态更丰富的是 Textmate，包括 VSCode 也是用的 Textmate，本地可以使用node环境来调用原生的模块</p><h2 id="_2、oniguruma" tabindex="-1">2、Oniguruma <a class="header-anchor" href="#_2、oniguruma" aria-label="Permalink to &quot;2、Oniguruma&quot;">​</a></h2><blockquote><p>[Apr 16, 2020] vscode 将 oniguruma 从原生模块 <a href="https://github.com/atom/node-oniguruma" target="_blank" rel="noreferrer">node-oniguruma</a> 独立出来为 wasm 版本的 <a href="https://github.com/microsoft/vscode-oniguruma" target="_blank" rel="noreferrer">vscode-oniguruma</a></p></blockquote><table><thead><tr><th>模块名</th><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>onigurumaLib</td><td><a href="https://github.com/kkos/oniguruma" target="_blank" rel="noreferrer">oniguruma</a></td><td>是用 c 的一个解释器，不是 node 或者 浏览器模块，无法在web前端项目中使用</td></tr><tr><td>node-oniguruma</td><td><a href="https://github.com/atom/node-oniguruma" target="_blank" rel="noreferrer">node-oniguruma</a></td><td>atom 对 oniguruma 封装的 node 模块，无法在浏览器端运行。VSCode 之前使用的模块</td></tr><tr><td>vscode-oniguruma</td><td><a href="https://github.com/microsoft/vscode-oniguruma" target="_blank" rel="noreferrer">vscode-oniguruma</a></td><td>vscode 用 wasm 对 oniguruma 封装的模块，应该可以在浏览器端运行</td></tr><tr><td>onigasm</td><td><a href="https://github.com/NeekSandhu/onigasm" target="_blank" rel="noreferrer">onigasm</a></td><td>使用 WebAssembly 的技术将 c 的版本移植到 wasm，这个是可以在 web 端运行（因为没有 V8 的一些定制加成，性能比 node-oniguruma 差 2 倍，相比 C 下的 oniguruma 未知）</td></tr></tbody></table><h2 id="_3、模块" tabindex="-1">3、模块 <a class="header-anchor" href="#_3、模块" aria-label="Permalink to &quot;3、模块&quot;">​</a></h2><p>项目中使用到的模块</p><table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td>vscode-oniguruma</td><td>vscode 用 wasm 对 oniguruma 封装的模块</td></tr><tr><td>vscode-textmate</td><td>用来提供语法解析、语法注册器、主题注册器等，vscode 实现的 textmate 相关核心功能</td></tr><tr><td>textmate-registry</td><td>用来提供不同语言的加载、配置、注册功能</td></tr><tr><td>languages</td><td>不同语言的具体解析功能、配置和语法设置等</td></tr><tr><td>textmate-tokenizer</td><td>封装词法分析的接口，让 monaco 能够使用 textmate 的解析器</td></tr><tr><td>theme-registry</td><td>提供主题的转换、加载、管理、切换</td></tr></tbody></table><p>from： 1、<a href="https://ubug.io/blog/workpad-part-5" target="_blank" rel="noreferrer">https://ubug.io/blog/workpad-part-5</a></p>',11),n=[d];function i(m,s,h,u,c,g){return o(),e("div",null,n)}const p=t(a,[["render",i]]);export{b as __pageData,p as default};
