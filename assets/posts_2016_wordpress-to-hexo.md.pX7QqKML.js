import{_ as s,c as e,o as a,U as i,av as t}from"./chunks/framework.I0qYP7JU.js";const u=JSON.parse('{"title":"博客从wordpress迁移到hexo","description":"","frontmatter":{"title":"博客从wordpress迁移到hexo","date":"2016-12-02T18:33:20.000Z","id":1057,"author":"welpher.yu","tags":["wordpress","hexo"],"categories":["blog"]},"headers":[],"relativePath":"posts/2016/wordpress-to-hexo.md","filePath":"posts/2016/wordpress-to-hexo.md"}'),h={name:"posts/2016/wordpress-to-hexo.md"},o=i(`<h4 id="wordpress的这些年" tabindex="-1">wordpress的这些年 <a class="header-anchor" href="#wordpress的这些年" aria-label="Permalink to &quot;wordpress的这些年&quot;">​</a></h4><p>从这个博客建立已经好些年了，自从14年后就没时间管理了，因为工作太忙了。后来一度不可用了，然后登上服务器才发现，硬盘满了，因为<code>nginx</code>的日志把硬盘塞满了。当然了，一直是使用的<code>wordpress</code>，为了后台的安全，还用了<code>google authenticator</code>两步验证来保证。但是最近发现，还是被破了，后台的某个账号被攻破了，塞了无数的垃圾文章，好在我当时设了审核，所以这些垃圾文章都没有发布出来。想想之前换了<code>vps</code>的套餐，为此博客还搬了次家，太折腾了，VPS厂才不会给你备份数据（收费）。</p><h4 id="hexo的好处" tabindex="-1">hexo的好处 <a class="header-anchor" href="#hexo的好处" aria-label="Permalink to &quot;hexo的好处&quot;">​</a></h4><p><code>hexo</code>是基于<code>node.js</code>的静态博客程序，对前端来说，没有比这个更有吸引力了，而且相比<code>jekyll</code>、<code>Octopress</code>来说：生成页面速度极快，主题当然也是非常丰富的。当然，可以把站点部署到<code>Github</code>,我不会这样，我用我买的VPS部署博客。于是，你看到的博客就是现在这个样子了。</p><h4 id="github-vps-使用webhooks进行自动部署" tabindex="-1">Github + VPS 使用Webhooks进行自动部署 <a class="header-anchor" href="#github-vps-使用webhooks进行自动部署" aria-label="Permalink to &quot;Github + VPS 使用Webhooks进行自动部署&quot;">​</a></h4><p>这里一定要说一下，网上很多github+vps自动部署的文章都是git+vps的自动部署，其实就是你在vps上部署一个git库，然后当你提交的时候，再在本服务上做post hook部署。</p><p>我们的目标就是：“当我提交新的文章到Github时，VPS上git pull代码，然后hexo g生成文章”。</p><ul><li><p>自动化部署脚本</p><p>很简单的写了个shell脚本 deploy.sh</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WEB_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/your path&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Start deployment&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $WEB_PATH</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pulling source code from Github...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Generate posts&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Finished.&quot;</span></span></code></pre></div></li><li><p>部署博客</p><p>从Github上把你的博客代码pull下来，然后把node.js环境安装好（环境还是不用自动脚本执行安装，每次变更依赖手动来处理）</p></li><li><p>webhooks监听</p><p>Github本身都支持webhooks的设定</p><p><img src="`+t+'" alt="webhooks"></p><p>如图，Payload URL 上填上需要部署到的服务器的网址，比方说<a href="http://dev.abc.net/incoming%E3%80%82%E7%84%B6%E5%90%8E%E4%B9%8B%E5%90%8E%E6%AF%8F%E6%AC%A1%E6%9C%89" target="_blank" rel="noreferrer">http://dev.abc.net/incoming。然后之后每次有</a> push 事件 GitHub 都会主动往这个地址发送一个 POST 请求，当然你也可以选择任何事件都发个 POST 通知你。GitHub 还有个 Secret 的设定，就是一个字符串，如果加上的话就在 POST 请求的 HTTP 头中会带一个 Hash 值做验证密文，证明这个 POST 真是来自 GitHub，不然任何人都往那个地址 POST 请求，很容易被攻击。</p><p>现在，Github会给我们发请求了，我们在自己的服务上需要一个handler来处理这个请示，处理这个请求，可以用node.js的<a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="noreferrer">github-webhook-handler</a>,当然也可以用php的<a href="https://github.com/Coppertino/github-webhook" target="_blank" rel="noreferrer">github-webhook</a>、<a href="https://gist.github.com/welpher/792fd4bbf5152beb4c93e5e9d9423e3b" target="_blank" rel="noreferrer">github-webhook-handler.php</a>等。当然啦，其它语言随意，也可以自己敲代码敲出来。当然了，最后就是要在这些handler里执行我们之前写的shell哦，不然怎么能实现自动部署呢，是吧亲。</p></li></ul>',8),p=[o];function n(l,r,d,k,c,b){return a(),e("div",null,p)}const F=s(h,[["render",n]]);export{u as __pageData,F as default};
