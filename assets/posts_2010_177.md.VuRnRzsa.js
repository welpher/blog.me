import{_ as t,c as o,o as e,U as a}from"./chunks/framework.I0qYP7JU.js";const h=JSON.parse('{"title":"utf-8页面form提交到gb2312页面编码的问题","description":"","frontmatter":{"title":"utf-8页面form提交到gb2312页面编码的问题","tags":["编码","表单"],"id":177,"author":"welpher.yu","categories":["web前端"],"date":"2010-08-27T21:55:05.000Z"},"headers":[],"relativePath":"posts/2010/177.md","filePath":"posts/2010/177.md"}'),p={name:"posts/2010/177.md"},r=a('<p>在开发的过程中出现了一个问题，RT。</p><p>具体是这样的，当我在一个utf-8页面中的表单中填写数据，然后以get方式传入另一个utf-8的页面。然后，在这个页面把参数得到，进行一部分处理后，再传给这个页面的iframe页面里（这个页面编码为gb2312）。这样就会出问题，iframe页面不会得到我想要的东西，因为编码把我填写的东西已经改变了。</p><p>在明确是编码问题后，就去谷歌搜索，这种情况有好几种解决方法：</p><ol><li>在ie下用vbscript对输入的值进行处理。这种方法不适合本项目，而且不支持ff，pass；</li><li>隐性在页面中嵌入一个包含GB2312页面的iframe，把参数全部注入里面进行提交。这种方法比较麻烦，而且我还得弄一个GB2312的空白页面，PASS；</li><li>这种方法非常的好，而且代码量非常少： <a href="http://www.chenchanglong.com/program/accept-charset.html" target="_blank" rel="noreferrer">http://www.chenchanglong.com/program/accept-charset.html</a> 这个作者有详细的说明；</li></ol><blockquote><p>我们在UTF-8、GB2312、GBk不同编码页面进行表单提交时，如果不做特殊处理，经常会出现乱码问题。这种情况往往需要编码，但是有些情不得已我们可能无法控制接收方或者发送方的编码问题，现在介绍一个最方便的解决的方案。</p><p>解决方案：</p><p>在W3C里介绍了一个 form 不太常见的属性：accept-charset，用它可以完成我们的需求。</p><p>在GBK编码的页面里编写如下代码：</p><p>&lt;form method=&quot;post&quot; action=&quot;...&quot; accept-charset=&quot;utf-8&quot;&gt; ... &lt;/form&gt;</p><p>如此的代码在Firefox等正常的浏览器下没有任何问题，但是遇到IE这个浏览器就不灵了，现在我们还得Hack一下：</p><p>&lt;form method=&quot;post&quot; action=&quot;...&quot; accept-charset=&quot;utf-8&quot; onsubmit=&quot;document.charset=&#39;utf-8&#39;;&quot;&gt; ... &lt;/form&gt;</p><p>剩下的工作交给浏览器搞定了。同理UTF-8编码页面提交到GB2312表单，把上面的utf-8 改成gb2312就可以了。</p></blockquote><p>至此，这个问题完美解决。</p>',6),c=[r];function s(u,f,i,l,n,m){return e(),o("div",null,c)}const g=t(p,[["render",s]]);export{h as __pageData,g as default};
