import{_ as s,c as a,o as p,U as n}from"./chunks/framework.I0qYP7JU.js";const f=JSON.parse('{"title":"MySQL的my.cnf参数详解","description":"","frontmatter":{"title":"MySQL的my.cnf参数详解","tags":["mysql"],"id":71,"author":"welpher.yu","categories":["数据库"],"date":"2011-08-19T11:44:13.000Z"},"headers":[],"relativePath":"posts/2011/71.md","filePath":"posts/2011/71.md"}'),e={name:"posts/2011/71.md"},l=n(`<blockquote><p>前段时间搭建服务器，数据库调优其实很关键，搜了一篇放在这里备用</p></blockquote><p>调整MySQL运行参数，修改/etc/my.cnf文件调整mysql运行参数重启MySQL后生效，在MySQL4版本以后，一部分内部变量可以在MySQL运行时设置，不过重启MySQL就失效了。</p><p>mysqld程序--目录和文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>basedir      = path          # 使用给定目录作为根目录(安装目录)。</span></span>
<span class="line"><span>datadir      = path          # 从给定目录读取数据库文件。</span></span>
<span class="line"><span>pid-file     = filename      # 为mysqld程序指定一个存放进程ID的文件(仅适用于UNIX/Linux系统);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[mysqld]</span></span>
<span class="line"><span>socket = /tmp/mysql.sock     # 为MySQL客户程序与服务器之间的本地通信指定一个套接字文件(Linux下默认是/var/lib/mysql/mysql.sock文件)</span></span>
<span class="line"><span>port             = 3306      # 指定MsSQL侦听的端口</span></span>
<span class="line"><span>key_buffer       = 384M      # key_buffer是用于索引块的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)。</span></span>
<span class="line"><span>索引块是缓冲的并且被所有的线程共享，key_buffer的大小视内存大小而定。</span></span>
<span class="line"><span>table_cache      = 512       # 为所有线程打开表的数量。增加该值能增加mysqld要求的文件描述符的数量。可以避免频繁的打开数据表产生的开销</span></span>
<span class="line"><span>sort_buffer_size = 2M        # 每个需要进行排序的线程分配该大小的一个缓冲区。增加这值加速ORDER BY或GROUP BY操作。</span></span>
<span class="line"><span>注意：该参数对应的分配内存是每连接独占！如果有100个连接，那么实际分配的总共排序缓冲区大小为100×6=600MB</span></span>
<span class="line"><span>read_buffer_size = 2M        # 读查询操作所能使用的缓冲区大小。和sort_buffer_size一样，该参数对应的分配内存也是每连接独享。</span></span>
<span class="line"><span>query_cache_size = 32M       # 指定MySQL查询结果缓冲区的大小</span></span>
<span class="line"><span>read_rnd_buffer_size    = 8M # 改参数在使用行指针排序之后，随机读用的。</span></span>
<span class="line"><span>myisam_sort_buffer_size =64M # MyISAM表发生变化时重新排序所需的缓冲</span></span>
<span class="line"><span>thread_concurrency      = 8  # 最大并发线程数，取值为服务器逻辑CPU数量×2，如果CPU支持H.T超线程，再×2</span></span>
<span class="line"><span>thread_cache            = 8  # #缓存可重用的线程数</span></span>
<span class="line"><span>skip-locking                 # 避免MySQL的外部锁定，减少出错几率增强稳定性。</span></span>
<span class="line"><span>[mysqldump]</span></span>
<span class="line"><span>max_allowed_packet      =16M # 服务器和客户端之间最大能发送的可能信息包</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[myisamchk]</span></span>
<span class="line"><span>key_buffer   = 256M</span></span>
<span class="line"><span>sort_buffer  = 256M</span></span>
<span class="line"><span>read_buffer  = 2M</span></span>
<span class="line"><span>write_buffer = 2M</span></span></code></pre></div><p>其他可选参数：</p><p>back_log = 384 指定MySQL可能的连接数量</p><p>当MySQL主线程在很短时间内接收到非常多的连接请求，该参数生效，主线程花费很短时间检查连接并且启动一个新线程。</p><p>back_log参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。如果系统在一个短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的侦听队列的大小。</p><p>试图设定back_log高于你的操作系统的限制将是无效的。默认值为50。对于Linux系统推荐设置为小于512的整数。</p><p>max_connections = n，MySQL服务器同时处理的数据库连接的最大数量(默认设置是100)。超过限制后会报 Too many connections 错误</p><p>key_buffer_size = n，用来存放索引区块的RMA值(默认设置是8M)，增加它可得到更好处理的索引(对所有读和多重写)</p><p>record_buffer：每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，你可能想要增加该值。默认数值是131072(128K)</p><p>wait_timeout：服务器在关闭它之前在一个连接上等待行动的秒数。</p><p>interactive_timeout：服务器在关闭它前在一个交互连接上等待行动的秒数。一个交互的客户被定义为对 mysql_real_connect()使用 CLIENT_INTERACTIVE 选项的客户。默认数值是28800，可以把它改为3600。</p><p>skip-name-resolve：禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！</p><p>log-slow-queries = slow.log 记录慢查询,然后对慢查询一一优化</p><p>skip-innodb</p><p>skip-bdb</p><p>关闭不需要的表类型,如果你需要,就不要加上这个</p><p># &gt; SHOW VARIABLES LIKE &#39;%query_cache%&#39;;</p><p># &gt; SHOW STATUS LIKE &#39;Qcache%&#39;;</p><p>如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况； 如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲； 如果Qcache_free_blocks的值非常大，则表明缓冲区中碎片很多。</p><p>max_allowed_packet</p><p>通信信息包是发送至MySQL服务器的单个SQL语句，或发送至客户端的单一行。</p><p>在MySQL 5.1服务器和客户端之间最大能发送的可能信息包为1GB。 当MySQL客户端或mysqld服务器收到大于max_allowed_packet字节的信息包时，将发出“信息包过大”错误，并关闭连接。对于某些客户端，如果通信信息包过大，在执行查询期间，了能回遇到“丢失与MySQL服务器的连接”错误。</p><p>客户端和服务器均有自己的max_allowed_packet变量，因此，如你打算处理大的信息包，必须增加客户端和服务器上的该变量。如果你正在使用mysql客户端程序，其max_allowed_packet变量的默认值为16MB。要想设置较大的值，可用下述方式启动mysql：</p><p>mysql&gt; mysql --max_allowed_packet=32M</p><p>它将信息包的大小设置为32MB。</p><p>服务器的默认max_allowed_packet值为1MB。如果服务器需要处理大的查询，可增加该值（例如，如果准备处理大的BLOB列）。例如，要想将该设置为16MB，可采用下述方式启动服务器：</p><p>mysql&gt; mysqld --max_allowed_packet=16M</p><p>也能使用选项文件来设置max_allowed_packet。要想将服务器的该变量设置为16MB，可在选项文件中增加下行内容：</p><p>[mysqld] max_allowed_packet=16M</p><p>增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或mysqld必须返回大的结果行时mysqld才会分配更多内存。该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。 如果你正是用大的BLOB值，而且未为mysqld授予为处理查询而访问足够内存的权限，也会遇到与大信息包有关的奇怪问题。如果怀疑出现了该情况，请尝试在mysqld_safe脚本开始增加ulimit -d 256000，并重启mysqld。</p><p>MySQL怎样打开和关闭数据库表</p><p>table_cache, max_connections和max_tmp_tables影响服务器保持打开的文件的最大数量。如果你增加这些值的一个或两个，你可以遇到你的操作系统每个进程打开文件描述符的数量上强加的限制。然而，你可以能在许多系统上增加该限制。请教你的OS文档找出如何做这些，因为改变限制的方法各系统有很大的不同。</p><p>table_cache与max_connections有关。例如，对于200个打开的连接，你应该让一张表的缓冲至少有200 * n，这里n是一个联结(join)中表的最大数量。</p><p>打开表的缓存可以增加到一个table_cache的最大值（缺省为64；这可以用mysqld的-O table_cache=#选项来改变）。一个表绝对不被关闭，除非当缓存满了并且另外一个线程试图打开一个表时或如果你使用mysqladmin refresh或mysqladmin flush-tables。</p><p>当表缓存满时，服务器使用下列过程找到一个缓存入口来使用： 不是当前使用的表被释放，以最近最少使用（LRU）顺序。 如果缓存满了并且没有表可以释放，但是一个新表需要打开，缓存必须临时被扩大。</p><p>如果缓存处于一个临时扩大状态并且一个表从在用变为不在用状态，它被关闭并从缓存中释放。</p><p>对每个并发存取打开一个表。这意味着，如果你让2个线程存取同一个表或在同一个查询中存取表两次(用AS)，表需要被打开两次。任何表的第一次打开占2个文件描述符；表的每一次额外使用仅占一个文件描述符。对于第一次打开的额外描述符用于索引文件；这个描述符在所有线程之间共享</p><p>原文地址：<a href="http://blogold.chinaunix.net/u/11263/showart_1011942.html" target="_blank" rel="noreferrer">http://blogold.chinaunix.net/u/11263/showart_1011942.html</a></p>`,41),c=[l];function t(_,i,o,r,m,y){return p(),a("div",null,c)}const M=s(e,[["render",t]]);export{f as __pageData,M as default};
