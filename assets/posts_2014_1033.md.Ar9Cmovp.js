import{_ as s,c as i,o as a,U as n}from"./chunks/framework.I0qYP7JU.js";const F=JSON.parse('{"title":"CentOS上搭建Git服务器","description":"","frontmatter":{"title":"CentOS上搭建Git服务器","tags":["centos","git"],"id":1033,"author":"welpher.yu","categories":["服务器"],"date":"2014-07-07T22:04:29.000Z"},"headers":[],"relativePath":"posts/2014/1033.md","filePath":"posts/2014/1033.md"}'),p={name:"posts/2014/1033.md"},t=n(`<blockquote><p>记录一下自己的安装过程，方便以后再次安装。</p></blockquote><p>Git是一个分布式版本控制软件，原来是linux内核开发者Linus Torvalds为了更好地管理linux内核开发而创立的。发展至今，Git已经成为了一个相当好用的版本管理工具。相比于SVN，如果想要保存一些微小的修改也必须得提交服务器保存才可以，这样使服务器的版本号过多，而Git解决了这个问题，一些小的修改只在本地提交即可，只需最后修改完成后再提交服务器。正是由于这样的便捷性，现在越来越多的社区项目都开始使用Git来取代SVN之类较为传统的版本管理工具进行开发。</p><p>使用CentOS搭建Git服务器是一件比较轻松的事儿，本次折腾主要涉及git, gitosis, gitweb的安装配置。其中，gitosis和gitweb是两种比较常用的方式，gitosis是以SSH方式访问和管理git， gitweb是通过http的方式访问和管理。利用这些工具即可满足Git服务器的基本功能。此外比较好的一点是，Git的管理工具几乎不会给服务器带来较大的性能压力。下面正式开始我们的Git安装配置记录。</p><h3 id="一、安装git" tabindex="-1">一、安装Git <a class="header-anchor" href="#一、安装git" aria-label="Permalink to &quot;一、安装Git&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><p>然后进行配置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useradd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">passwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><p>创建完用户后就可以切换到git用户下进行后面的设置，如用户名和邮箱：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">su</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;somebody&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;somebody@example.com&quot;</span></span></code></pre></div><p>设置默认将会保存在<code>~/.gitconfig</code>文件中。 此时，Git的功能就已经可以使用了。为了方便后面的操作，可以先来创建一个空版本库。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/repo</span></span></code></pre></div><p>然后建立项目目录</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/repo/huhamhire-hosts</span></span></code></pre></div><p>切换到项目目录，并进行初始化</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/repo/huhamhire-hosts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bare</span></span></code></pre></div><p>至此，一个初始的空项目版本库就配置完成了，后面安装了gitosis之后便可向库中推送我们的代码库内容。</p><h3 id="二、安装gitosis" tabindex="-1">二、安装gitosis <a class="header-anchor" href="#二、安装gitosis" aria-label="Permalink to &quot;二、安装gitosis&quot;">​</a></h3><p>在安装之前，可以看一下gitosis的实现原理：</p><p><a href="http://geeklu.com/2012/10/gitosis/" target="_blank" rel="noreferrer">http://geeklu.com/2012/10/gitosis/</a></p><p>先切换回root权限。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">su</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span></span></code></pre></div><p>并先安装python-setuptool</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-setuptools</span></span></code></pre></div><p>然后开始安装gitosis，值得注意的是gitosis的安装程序本身就是由git管理的，需要使用git来获取。这里在/tmp目录下进行相关的安装操作：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/res0nat0r/gitosis.git</span></span></code></pre></div><p>接下来进入下载的gitosis版本库进行安装:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitosis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>安装完成后，便进入对gitosis的设置阶段。由于gitosis需要通过SSH进行管理，所以需要创建SSH密钥对，并将公钥放在服务器端，私钥放在客户端。一般的流程是客户端创建完密钥后，将公钥传到服务器上生效。不过，偷懒的话直接在服务器上操作问题也不大。</p><p>切换到git用户并建立文件夹.ssh：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">su</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/git/.ssh</span></span></code></pre></div><p>一定记得，在客户机上生成公钥，上传到服务器，或者在服务器上生成，下载到客户机。</p><p>进入~/.ssh目录并使用ssh-keygen生成公钥：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/git/.ssh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span></span></code></pre></div><p>注意不能忘记私钥的密码。默认会生成~/.ssh/id_rsa.pub公钥文件。 有了密钥以后便可初始化gitosis，使gitosis获得对Git的管理权限：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gitosis-init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/git/.ssh/id_rsa.pub</span></span></code></pre></div><p>初始化之后，会在/home/git/repositories创建gitosis-admin.git项目，可以通过维护这个项目来对gitosis进行配置。</p><p>除此以外，还需要对gitosis-admin.git/hooks/post-update目录赋上特殊权限：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u+x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/git/repositories/gitosis-admin.git/hooks/post-update</span></span></code></pre></div><p>至此，服务器端的gitosys配置就完成了。</p><h3 id="三、设置并使用gitosys" tabindex="-1">三、设置并使用gitosys <a class="header-anchor" href="#三、设置并使用gitosys" aria-label="Permalink to &quot;三、设置并使用gitosys&quot;">​</a></h3><p>在服务器端完成了gitosys的配置之后，便可在客户端进行接下来的设置，以便使用Git服务器。</p><p>较为正规的做法是在客户端通过gitosis-admin版本库做管理设置，之后提交到服务器使项目权限生效，当然也可以使用操作系统的ssh登录方式进行验证，不过这里仅介绍前面一种方法。</p><p>在进行以下操作时，需要确认一下，你的公钥是不是已经放在客户机~/.ssh/目录下。如果你也在用github的话，那么你需要设置一下多公钥共存的东西。.ssh/config，在这个文件中写入：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Host github.com</span></span>
<span class="line"><span>HostName github.com</span></span>
<span class="line"><span>User git</span></span>
<span class="line"><span>IdentityFile C:/Users/abc/.ssh/id_rsa</span></span>
<span class="line"><span>Host git.oschina.net</span></span>
<span class="line"><span>HostName git.oschina.net</span></span>
<span class="line"><span>User git</span></span>
<span class="line"><span>IdentityFile C:/Users/abc/.ssh/id_rsa_a</span></span>
<span class="line"><span>Host abc.ueder.info</span></span>
<span class="line"><span>HostName abc.ueder.info</span></span>
<span class="line"><span>User git</span></span>
<span class="line"><span>Port 1000</span></span>
<span class="line"><span>IdentityFile C:/Users/abc/.ssh/id_rsa_new</span></span></code></pre></div><p>如我就使用了好几个git服务，每个都有自己的公钥，需要配置文件来区分开来，并且我自己的服务器ssh端口已经不是默认端口，需要在配置文件中声明，否则在每次clone的时候要声明端口。</p><p>在客户机上下载gitosis-admin版本库，这里以linux客户机为例：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@VPS的IP/Domain:/home/git/repositories/gitosis-admin.git</span></span></code></pre></div><p>获取完成后对gitosis-admin/gitosis.conf文件进行设置，以上面新建的项目为例，新增：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[group huhamhire-hosts]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> huhamhire-hosts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">members</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hamhire@myhost</span></span></code></pre></div><p>随后要将客户端的公钥放到keydir目录下，并随后提交设置到服务器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa.pub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/gitosis-admin/keydir/hamhire@myhost.pub</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/gitosis-admin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;add new repo&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div><p>由于之前已经在/home/git/repo/目录下设置了huhamhire-hosts的版本库位置，所以可以直接进行推送操作。</p><p>在本例中可以通过hamhire@myhost:/home/git/repo/huhamhire-hosts的路径来提交项目。</p><p>至此，gitosys的配置全部完成。</p><h3 id="四、安装gitweb" tabindex="-1">四、安装gitweb <a class="header-anchor" href="#四、安装gitweb" aria-label="Permalink to &quot;四、安装gitweb&quot;">​</a></h3><p>在配置完成了git服务器以后，如果需要方便在线查看，使用gitweb来提供一个简单网页版的版本显示界面是一个不错的选择。</p><p>在centos 下安装gitweb如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcgi-devel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git://github.com/gnosek/fcgiwrap.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcgiwrap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autoreconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>至此，fcgiwrap已经安装到 /usr/local/sbin/fcgiwrap</p><p>然后再安装spawn-fcgi</p><p>yum install spawn-fcgi</p><p>安装好后:</p><p>vim /etc/sysconfig/spawn-fcgi</p><p>修改文件为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># You must set some working options before the &quot;spawn-fcgi&quot; service will work.</span></span>
<span class="line"><span># If SOCKET points to a file, then this file is cleaned up by the init script.</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># See spawn-fcgi(1) for all possible options.</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Example :</span></span>
<span class="line"><span>#SOCKET=/var/run/php-fcgi.sock</span></span>
<span class="line"><span>#OPTIONS=&quot;-u apache -g apache -s $SOCKET -S -M 0600 -C 32 -F 1 -P /var/run/spawn-fcgi.pid -- /usr/bin/php-cgi&quot;</span></span>
<span class="line"><span>FCGI_SOCKET=/var/run/fcgiwrap.socket</span></span>
<span class="line"><span>FCGI_PROGRAM=/usr/local/sbin/fcgiwrap</span></span>
<span class="line"><span>FCGI_USER=nginx</span></span>
<span class="line"><span>FCGI_GROUP=nginx</span></span>
<span class="line"><span>FCGI_EXTRA_OPTIONS=&quot;-M 0700&quot;</span></span>
<span class="line"><span>OPTIONS=&quot;-u $FCGI_USER -g $FCGI_GROUP -s $FCGI_SOCKET -S $FCGI_EXTRA_OPTIONS -F 1 -P /var/run/spawn-fcgi.pid -- $FCGI_PROGRAM&quot;</span></span></code></pre></div><p>然后设置开机运行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chkconfig</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --levels</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2345</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spawn-fcgi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/etc/init.d/spawn-fcgi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>这里已经完成了fcgi的安装运行。如果你用的nginx，还需要对nginx.conf进行配置，才能将.cgi的请求转发给fcgiwrap.socket</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>location /cgi-bin/ {</span></span>
<span class="line"><span> # Disable gzip (it makes scripts feel slower since they have to complete</span></span>
<span class="line"><span> # before getting gzipped)</span></span>
<span class="line"><span> gzip off;</span></span>
<span class="line"><span> # Set the root to /usr/lib (inside this location this means that we are</span></span>
<span class="line"><span> # giving access to the files under /usr/lib/cgi-bin)</span></span>
<span class="line"><span> root /var/www/www.example.com;</span></span>
<span class="line"><span> # Fastcgi socket</span></span>
<span class="line"><span> fastcgi_pass unix:/var/run/fcgiwrap.socket;</span></span>
<span class="line"><span> # Fastcgi parameters, include the standard ones</span></span>
<span class="line"><span> include /etc/nginx/fastcgi_params;</span></span>
<span class="line"><span> # Adjust non standard parameters (SCRIPT_FILENAME)</span></span>
<span class="line"><span> fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span></span>
<span class="line"><span> }</span></span></code></pre></div><p>最后重启nginx就可以了。</p><h3 id="五、gitweb的界面美化与中文化" tabindex="-1">五、Gitweb的界面美化与中文化 <a class="header-anchor" href="#五、gitweb的界面美化与中文化" aria-label="Permalink to &quot;五、Gitweb的界面美化与中文化&quot;">​</a></h3><p>个人觉得Gitweb默认的用户界面是在是有点简陋地惨不忍睹，实在觉得不舒服的话，完全可以使用样式表进行适当的装饰。建议可以参考Github上的” gitweb-theme”项目进行美化：<a href="http://kogakure.github.com/gitweb-theme/" target="_blank" rel="noreferrer">http://kogakure.github.com/gitweb-theme/</a></p><p>参考：</p><ol><li><a href="http://black-pixel.net/serving-cgi-scripts-with-nginx-on-centos-6.html" target="_blank" rel="noreferrer">http://black-pixel.net/serving-cgi-scripts-with-nginx-on-centos-6.html</a></li><li><a href="https://blog.huhamhire.com/viewpost-231.html" target="_blank" rel="noreferrer">https://blog.huhamhire.com/viewpost-231.html</a></li></ol>`,74),e=[t];function l(h,o,k,g,c,d){return a(),i("div",null,e)}const u=s(p,[["render",l]]);export{F as __pageData,u as default};
