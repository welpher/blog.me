import{_ as i,c as s,o as a,U as e}from"./chunks/framework.I0qYP7JU.js";const m=JSON.parse('{"title":"前端面试基础","description":"","frontmatter":{"title":"前端面试基础","author":"welpher.yu","date":"2024-02-21T11:30:11.000Z","tags":["面试"],"categories":["web前端"],"private":true},"headers":[],"relativePath":"posts/2024/front-end-interview-1.md","filePath":"posts/2024/front-end-interview-1.md"}'),t={name:"posts/2024/front-end-interview-1.md"},l=e(`<ol><li>ES6 中有哪些新的 JS 特性？</li></ol><ul><li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="noreferrer">https://github.com/lukehoban/es6features</a></li></ul><ol start="2"><li>JS是sync还是Async？</li></ol><ul><li>JavaScript 始终是同步和单线程的。如果您在页面上执行 JavaScript 代码块，则当前不会执行该页面上的其他 JavaScript。</li></ul><ol start="3"><li>JS 中的 Sync 和 Async 有什么区别？</li></ol><ul><li>异步代码在主程序流程之外获取语句，允许异步调用之后的代码立即执行而无需等待。</li><li>链接 — <a href="https://rowanmanning.com/posts/javascript-for-beginners-async/" target="_blank" rel="noreferrer">https://rowanmanning.com/posts/javascript-for-beginners-async/</a></li></ul><ol start="4"><li><p>如何优化JS代码的性能？</p></li><li><p>什么是备忘( memoization)。实现用于记忆的 JS 代码。</p></li><li><p>什么是绑定？为绑定实现 pollyfill。</p></li><li><p>为：map、reduce、filter、promise 编写 polyfill</p></li><li><p>什么是纯函数？</p></li><li><p>shim 和 polyfill 有什么区别？</p></li></ol><ul><li><a href="https://2ality.com/2011/12/shim-vs-polyfill.html" target="_blank" rel="noreferrer">https://2ality.com/2011/12/shim-vs-polyfill.html</a></li></ul><ol start="10"><li>什么是 IIFE（立即调用函数表达式）( (Immediately Invoked Function Expressions))？</li><li>JavaScript 中的强制(Coercion )是什么？</li></ol><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion</a></li></ul><ol start="12"><li><p>高阶函数的定义是什么？</p></li><li><p>什么时候使用绑定功能？</p></li><li><p>什么是柯里化(Currying)？</p></li></ol><ul><li><a href="https://www.tutorialspoint.com/what-is-currying-in-javascript" target="_blank" rel="noreferrer">https://www.tutorialspoint.com/what-is-currying-in-javascript</a></li></ul><ol start="15"><li><p>你能举一个咖喱(curry )函数的例子吗？为什么这种语法有优势？</p></li><li><p>解释 Javascript 中的提升(Hoisting )是什么？</p></li></ol><ul><li>JavaScript 提升是指编译器在执行代码之前为变量和函数声明分配内存的过程。使用 var 进行的声明使用默认值 undefined 进行初始化。使用 let 和 const 进行的声明不会作为提升的一部分进行初始化。</li></ul><ol start="17"><li><p>解释原型（Prototype ）设计模式？</p></li><li><p>比较 Async/Await 和 Generators 的使用以实现相同的功能？</p></li></ol><ul><li><a href="https://medium.com/dailyjs/a-simple-guide-to-understanding-javascript-es6-generators-d1c350551950" target="_blank" rel="noreferrer">https://medium.com/dailyjs/a-simple-guide-to-understanding-javascript-es6-generators-d1c350551950</a></li></ul><ol start="19"><li><p>await 关键字和 yield 关键字有什么区别？</p></li><li><p>是否可以将 ECMAScript 6 生成器重置为其初始状态？</p></li><li><p>如何在 JavaScript 中深度冻结（deep-freeze）对象？ 我们可以使用 JavaScript 提供的 Object.freeze() 方法来防止通过更新和删除现有属性来添加新属性。 链接——<a href="https://www.geeksforgeeks.org/how-to-deep-freeze-an-object-in-javascript" target="_blank" rel="noreferrer">https://www.geeksforgeeks.org/how-to-deep-freeze-an-object-in-javascript</a></p></li><li><p>JavaScript 是按引用传递还是按值传递语言？</p></li></ol><ul><li>JavaScript 总是按值传递，所以改变变量的值永远不会改变底层的原语（字符串或数字）。然而，当一个变量引用一个包含数组的对象时，该值就是对该对象的引用。 <a href="https://medium.com/nodesimplified/javascript-pass-by-value-and-pass-by-reference-in-javascript-fcf10305aa9c" target="_blank" rel="noreferrer">https://medium.com/nodesimplified/javascript-pass-by-value-and-pass-by-reference-in-javascript-fcf10305aa9c</a></li></ul><ol start="23"><li><p>什么是 JS 中的 JIT 和事件循环？ 事件循环有一项简单的工作——监控调用堆栈和回调队列。如果调用堆栈为空，事件循环将从队列中取出第一个事件并将其推送到调用堆栈，调用堆栈有效地运行它。 链接——<a href="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5" target="_blank" rel="noreferrer">https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5</a></p></li><li><p>JS 中的闭包是什么？ 闭包是捆绑在一起（封闭）的函数与对其周围状态（词法环境）的引用的组合。换句话说，闭包让你可以从内部函数访问外部函数的作用域。在 JavaScript 中，每次创建函数时都会在创建函数时创建闭包。</p></li></ol><p>Question Link — <a href="https://dev.to/levimeahan/closures-scope-and-the-settimeout-for-loop-question-5bl6" target="_blank" rel="noreferrer">https://dev.to/levimeahan/closures-scope-and-the-settimeout-for-loop-question-5bl6</a></p><ul><li><a href="https://coderbyte.com/algorithm/3-common-javascript-closure-questions#" target="_blank" rel="noreferrer">https://coderbyte.com/algorithm/3-common-javascript-closure-questions#</a></li></ul><ol start="25"><li><p>使用箭头函数有什么好处？</p></li><li><p>JS 中的数组和字符串方法及其参数？</p></li><li><p>windows.onload 与 onDocumentReady 有什么区别？</p></li><li><p>ForEach() 和 map() 的区别？</p></li><li><p>JS中的回调函数是什么？</p></li><li><p>什么是回调地狱？</p></li><li><p>什么是承诺（promises ）以及承诺（promises ）如何运作？</p></li><li><p>事件冒泡和事件捕获之间的区别？</p></li><li><p>js中2+‘2’和2-‘2’的输出？ <a href="https://www.toptal.com/javascript/interview-questions" target="_blank" rel="noreferrer">https://www.toptal.com/javascript/interview-questions</a><a href="https://www.interviewbit.com/javascript-interview-questions/#coding-problems" target="_blank" rel="noreferrer">https://www.interviewbit.com/javascript-interview-questions/#coding-problems</a></p></li><li><p>JS中set方法和map方法的区别？</p></li></ol><ul><li>Map 是元素的集合，其中每个元素都存储为键、值对。 Map 对象可以同时保存对象和原始值作为键或值。当我们遍历 map 对象时，它以与插入相同的顺序返回键值对</li><li>JavaScript map set() 方法用于添加或更新元素以映射具有特定键值对的对象。每个值都必须有一个唯一的键。</li></ul><ol start="35"><li>软件开发模型——KISS、SOLID、POC、DRY、MVP 等</li><li>什么是 javascript 中的 debounce 和 throttling？</li><li>JS中SetTimeout和SetInterval的区别？</li><li>如何使用ClearInterval &amp; ClearTimeout？</li><li>为什么在 JS 中引入了 let 和 const？</li><li>NaN 和 undefined 有什么区别？</li><li>阅读逻辑与 (&amp;&amp;) 和逻辑或 (||) -&gt; 短路评估</li></ol><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND</a></p></li></ul><h1 id="请按以下顺序阅读以下主题" tabindex="-1">请按以下顺序阅读以下主题： <a class="header-anchor" href="#请按以下顺序阅读以下主题" aria-label="Permalink to &quot;请按以下顺序阅读以下主题：&quot;">​</a></h1><p>1.‘this’关键字 链接——<a href="https://www.w3schools.com/js/js_this.asp" target="_blank" rel="noreferrer">https://www.w3schools.com/js/js_this.asp</a></p><ol start="2"><li><p>Call、Apply 和 Bind 方法及其与 ‘this’ 关键字的使用</p></li><li><p>JS 中的闭包 闭包是函数和声明该函数的词法环境的组合。该环境由创建闭包时在范围内的任何局部变量组成。 闭包是捆绑在一起（封闭）的函数与对其周围状态（词法环境）的引用的组合。换句话说，闭包让你可以从内部函数访问外部函数的作用域。在 JavaScript 中，每次创建函数时都会在创建函数时创建闭包。 链接 — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></p></li><li><p>JS 中的柯里化（Currying ） <a href="https://www.tutorialspoint.com/what-is-currying-in-javascript" target="_blank" rel="noreferrer">https://www.tutorialspoint.com/what-is-currying-in-javascript</a></p></li><li><p>编写 sum(1)(2)(3) 和 sum(1,2,3) 的柯里化代码</p></li><li><p>为什么需要Bind、调用和应用？</p></li></ol><h1 id="devesh-js-采访资料-https-devesh-kr-sri-medium-com-javascript-3497a26e5e5a" tabindex="-1">Devesh JS 采访资料：<a href="https://devesh-kr-sri.medium.com/javascript-3497a26e5e5a" target="_blank" rel="noreferrer">https://devesh-kr-sri.medium.com/javascript-3497a26e5e5a</a> <a class="header-anchor" href="#devesh-js-采访资料-https-devesh-kr-sri-medium-com-javascript-3497a26e5e5a" aria-label="Permalink to &quot;Devesh JS 采访资料：https://devesh-kr-sri.medium.com/javascript-3497a26e5e5a&quot;">​</a></h1><h1 id="重要话题" tabindex="-1">重要话题： <a class="header-anchor" href="#重要话题" aria-label="Permalink to &quot;重要话题：&quot;">​</a></h1><ol><li>高级 JavaScript 实践</li><li>面向对象编程</li><li>函数式编程</li><li>范围和执行上下文</li><li>继承+原型链</li><li>最新特性：ES6、ES7、ES8、ES9、ES10、ES2020</li><li>闭包</li><li>异步 JavaScript + 事件循环</li><li>JavaScript 模块</li><li><code>this</code>关键字</li><li>JavaScript 引擎和运行时</li><li>错误处理</li><li>堆栈溢出</li><li>内存泄漏</li><li>组合与继承</li><li>类型强制</li><li>按引用传递与按值传递</li><li>高阶函数</li><li>IIFE</li><li>.call()、.apply()、.bind()</li><li>解释器/编译器/ JIT编译器</li><li>垃圾收集</li><li>吊装</li><li>JavaScript 最佳实践</li></ol><h1 id="数组方法-https-www-freecodecamp-org-news-the-javascript-array-handbook" tabindex="-1">数组方法：<a href="https://www.freecodecamp.org/news/the-javascript-array-handbook/" target="_blank" rel="noreferrer">https://www.freecodecamp.org/news/the-javascript-array-handbook/</a> <a class="header-anchor" href="#数组方法-https-www-freecodecamp-org-news-the-javascript-array-handbook" aria-label="Permalink to &quot;数组方法：https://www.freecodecamp.org/news/the-javascript-array-handbook/&quot;">​</a></h1><p>#LinkedIn 技能评估测验 — <a href="https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes" target="_blank" rel="noreferrer">https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes</a></p><p>Promise Example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetUserDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(“Fetching data, Please wait…..”);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(“</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">https</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //jsonplaceholder.typicode.com/todos/1&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // .then(json =&gt; console.log(json))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // .catch(error =&gt; console.log(error));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json)).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        3000);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,35),r=[l];function p(n,o,h,c,k,d){return a(),s("div",null,r)}const E=i(t,[["render",p]]);export{m as __pageData,E as default};
