import{_ as s,c as e,o as a,U as t}from"./chunks/framework.I0qYP7JU.js";const b=JSON.parse(`{"title":"let's encrypt免费证书获取","description":"","frontmatter":{"title":"let's encrypt免费证书获取","date":"2016-12-04T22:21:11.000Z","id":1058,"author":"welpher.yu","tags":["ssl证书"],"categories":["服务器"]},"headers":[],"relativePath":"posts/2016/lets-encrypt-certificate-for-your-website.md","filePath":"posts/2016/lets-encrypt-certificate-for-your-website.md"}`),n={name:"posts/2016/lets-encrypt-certificate-for-your-website.md"},i=t(`<p>Let’s Encrypt是电子前哨基金会（EFF）发布的免费SSL证书服务，受到微软、谷歌等大佬的支持，但是配置比较复杂（那是以前）。</p><p>现在有了cerbot就简单多了。</p><h4 id="安装cerbot" tabindex="-1">安装cerbot <a class="header-anchor" href="#安装cerbot" aria-label="Permalink to &quot;安装cerbot&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/certbot/certbot</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certbot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./certbot-auto</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><p>直接从github上clone下来就可以直接用了，然后看看有哪些命令可以用。</p><h4 id="生成证书" tabindex="-1">生成证书 <a class="header-anchor" href="#生成证书" aria-label="Permalink to &quot;生成证书&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>./certbot-auto certonly --webroot --agree-tos -v -t --email 邮箱 -w 网站目录 -d 域名</span></span></code></pre></div><p>这一步会在网站根目录生成<code>.well-known/acme-challenge</code>，所以一定要保证你的网站是可访问的，生成证书时会来验证是不是你的网站。然后才会最终生成证书。当你看到下面信息的时候就表示证书生成了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>- Congratulations! Your certificate and chain have been saved at</span></span>
<span class="line"><span>/etc/letsencrypt/live/域名/fullchain.pem</span></span></code></pre></div><p>证书所在的地方是<code>/etc/letsencrypt/</code>，<code>archive</code>里面是所有证书的存档，<code>keys</code>里面是所有证书,我们要用到的在<code>live</code>这个目录里面的你的域名文件夹下。</p><ul><li><code>privkey.pem</code>这是私匙，对应Nginx的<code>ssl_certificate_key</code>选项，或者Apache2的<code>SSLCertificateKeyFile</code>选项。</li><li><code>cert.pem</code>服务器证书，这个只有Apache2低于2.4.8版本需要，对应<code>SSLCertificateFile</code>选项。</li><li><code>chain.pem</code> 除服务器证书之外的所有证书，对于1.3.7版以上的Nginx对应<code>ssl_trusted_certificate</code>选项，对于低于2.4.8的Apache2对应<code>SSLCertificateChainFile</code>选项。</li><li><code>fullchain.pem</code> 包括上面的服务器证书和其他证书，Nginx对应<code>ssl_certificate</code>选项，2.4.8版以上的Apache2对应<code>SSLCertificateFile</code>。</li></ul><h4 id="生成dhparams" tabindex="-1">生成dhparams <a class="header-anchor" href="#生成dhparams" aria-label="Permalink to &quot;生成dhparams&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>openssl dhparam -out /etc/ssl/certs/dhparams.pem 2048</span></span></code></pre></div><h4 id="配置nginx" tabindex="-1">配置Nginx <a class="header-anchor" href="#配置nginx" aria-label="Permalink to &quot;配置Nginx&quot;">​</a></h4><p>在nginx的server配置里添加如下设置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>listen 443</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ssl on;</span></span>
<span class="line"><span>ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;</span></span>
<span class="line"><span>ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;</span></span>
<span class="line"><span>ssl_dhparam /etc/ssl/certs/dhparams.pem;</span></span>
<span class="line"><span>ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span></span>
<span class="line"><span>ssl_ciphers HIGH:!aNULL:!MD5;</span></span></code></pre></div><p>当然了，最后在原来的80端口加上跳转：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen 80;</span></span>
<span class="line"><span>    server_name domain.com;</span></span>
<span class="line"><span>    return 301 https://$server_name$request_uri;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>然后重启nginx服务就可以用了。</p><h4 id="配置自动更新证书" tabindex="-1">配置自动更新证书 <a class="header-anchor" href="#配置自动更新证书" aria-label="Permalink to &quot;配置自动更新证书&quot;">​</a></h4><p>证书的有效期是三个月，我们可以用crontab来实现自动更新。</p><p>写一个脚本程序来更新：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>/your path/certbot-auto renew --quiet --no-self-upgrade</span></span></code></pre></div><p>然后设置crontab：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>10 1 * * 0 /your path/renew.sh</span></span></code></pre></div><p>每周日的一点五十会进行证书检查更新，cerbot只有在到期前一个月才会进行更新，所以不用担心会一直更新。</p>`,26),p=[i];function c(l,o,r,d,h,u){return a(),e("div",null,p)}const v=s(n,[["render",c]]);export{b as __pageData,v as default};
