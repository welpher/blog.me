import{_ as t,c as i,o as l,U as e}from"./chunks/framework.I0qYP7JU.js";const h=JSON.parse('{"title":"python学习笔记","description":"","frontmatter":{"title":"python学习笔记","tags":["python"],"id":179,"author":"welpher.yu","categories":["后端开发"],"date":"2010-09-15T21:57:17.000Z"},"headers":[],"relativePath":"posts/2010/179.md","filePath":"posts/2010/179.md"}'),o={name:"posts/2010/179.md"},s=e("<ol><li>python的赋值语句不会返回值：x=1;y=(x=x+1)会发生syntaxError错误</li><li>python不支持a++ a--这种自增自减的运算符</li><li>专用下划线标识符： <ul><li>_x 不用“from module import *”导入</li><li>__x__系统定义名字</li><li>__x 类中的私有变量名</li></ul></li><li>模块结构和布局： <ul><li>起始行（unix）(#/usr/bin/env python)</li><li>模块文档(&quot;this is a test  module&quot;)</li><li>模块导入(import sys)</li><li>变量定义(debug = True)</li><li>类定义(class MyClass(boject)😃</li><li>函数定义(def myFunction()😃</li><li>主程序(if <strong>name</strong> == &#39;<strong>main</strong>&#39;:test())(放置测试代码的好地方)。</li></ul></li><li>判断模块是被导入还是被直接执行的方法：导入时__name__的值为模块名字；执行时__name__的值为__main__</li><li>一些用于基本对象类型的内建函数（repr()输出对Python比较友好，而str()的输出对人比较友好）： <ul><li>cmp(a,b)比较a和b，根据结果返回整数a&lt;b返回小于0的数；a&gt;b返回大于0的数；相等返回0</li><li>repr(a)或者&#39;a&#39;，返回一个对象的字符串表示</li><li>str(a)返回对象适合可读性的字符串表示</li><li>type(a)得到一个对象的类型，并返回相应的type对象</li></ul></li></ol>",1),_=[s];function a(n,r,p,c,u,m){return l(),i("div",null,_)}const y=t(o,[["render",a]]);export{h as __pageData,y as default};
