import{_ as s,c as n,o as a,U as p,aj as e,ak as i,al as t}from"./chunks/framework.I0qYP7JU.js";const f=JSON.parse('{"title":"wordpress/nginx安全设置","description":"","frontmatter":{"title":"wordpress/nginx安全设置","tags":["nginx","wordpress"],"id":820,"author":"welpher.yu","categories":["服务器"],"date":"2012-07-25T20:47:00.000Z"},"headers":[],"relativePath":"posts/2012/820.md","filePath":"posts/2012/820.md"}'),l={name:"posts/2012/820.md"},r=p('<p>最近闲时研究了下博客的安全，除去系统的安全问题，主要关注点在登录这一块。</p><p><strong>一、安装wordpress插件实现安全登录</strong></p><p><a href="http://wordpress.org/extend/plugins/google-authenticator/" title="Google Authenticator" target="_blank" rel="noreferrer">Google Authenticator</a>（使用谷歌两步验证加强 WordPress 登录安全）</p><p>我选择了这个真正能保证wp安全的这个插件，这个插件提供双重安全验证登录，跟谷歌帐户的“两步验证”是一样的原理。在wp上安装好这个插件并启用后，进入“用户”-》“我的个人资料”会看到如下界面：</p><p><img src="'+e+'" alt="google auth" title="google auth"></p><p>选中“Active”，填写“站点描述”，保存。然后根据自己的手持设备<a href="http://support.google.com/accounts/bin/answer.py?hl=cn&amp;answer=1066447" title="安装 Google 身份验证器" target="_blank" rel="noreferrer">安装 Google 身份验证器</a>（我在我的apple设备及黑莓设备上都安装了），添加令牌（填写站点描述及密钥）后就绑定了。然后就可以在登录界面（<span style="color:#ff0000;">亲，切记在手持设备上绑定后再登出啊</span>）看到如下情况了：</p><p><img src="'+i+'" alt="wplogin" title="wplogin"></p><p>如果博客不只一个用户，其它用户也可以在他自己的资料里面启用这种两步验证的登录方式，如果用户没有启用，那么登录的时候不用填写“google authenticator code”。</p><p>当然了，通过搜索还有其它登录安全的插件，如<a href="http://wordpress.org/extend/plugins/one-time-password/" target="_blank" rel="noreferrer">One Time Password</a> （采用一次性密码登录你的 WordPress，应该类似于银行纸质的那种刮刮卡）、<a href="http://wordpress.org/extend/plugins/wp-login-security/" target="_blank" rel="noreferrer">WP Login Security</a> （根据登录用户IP地址来保护你的 WordPress 安全）、<a href="http://wordpress.org/extend/plugins/login-lockdown/" target="_blank" rel="noreferrer">Login Lockdown</a>（锁定无效登录）、<a href="http://wordpress.org/extend/plugins/wordpress-firewall-2/" target="_blank" rel="noreferrer">WP Firewall 2</a>。</p><p><strong>二、设置SSL登录及SSL后台</strong></p><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。</p><p>它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p><p>首先要在wordpress中设置强制SSL登录及SSL后台，具体做法是：</p><p>在wordpress的根目录中找到“wp-config.php”，编辑这个文件在</p><p><img src="'+t+`" alt="wpconfig" title="wpconfig"></p><p>设置两个常量“FORCE_SSL_LOGIN”、“FORCE_SSL_ADMIN”为true（一定要在图中蓝色文字前设置，听说这样才能生效）。</p><p>我用得是nginx反向代理，只有如上设置肯定是不行的。</p><p>要做下面的操作前，首先要保证安装nginx的时候安装了ssl的支持，通过命令“nginx -V”就能查看你在编译的时候添加没有添加“--with-http_ssl_module”这个参数。如果没加，重新编译安装一次吧（记得备份配置文件）。</p><p>nginx准备好后就开始设置了，我在这里就不说收费的受浏览器信任的证书了，我用了“自颁发不受浏览器信任的证书”。</p><p>输入以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.key</span></span></code></pre></div><p>会生成两个文件，当然也会让你填很多问题，</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Generating a 1024 bit RSA private key</span></span>
<span class="line"><span>...................................++++++</span></span>
<span class="line"><span>..............................++++++</span></span>
<span class="line"><span>writing new private key to &#39;nginx.pem&#39;</span></span>
<span class="line"><span>-----</span></span>
<span class="line"><span>You are about to be asked to enter information that will be incorporated</span></span>
<span class="line"><span>into your certificate request.</span></span>
<span class="line"><span>What you are about to enter is what is called a Distinguished Name or a DN.</span></span>
<span class="line"><span>There are quite a few fields but you can leave some blank</span></span>
<span class="line"><span>For some fields there will be a default value,</span></span>
<span class="line"><span>If you enter &#39;.&#39;, the field will be left blank.</span></span>
<span class="line"><span>-----</span></span>
<span class="line"><span>Country Name (2 letter code) [AU]:US</span></span>
<span class="line"><span>State or Province Name (full name) [Some-State]:New Jersey</span></span>
<span class="line"><span>Locality Name (eg, city) []:Absecon</span></span>
<span class="line"><span>Organization Name (eg, company) [Internet Widgits Pty Ltd]:SoftwareDev, LLC</span></span>
<span class="line"><span>Organizational Unit Name (eg, section) []:Web Services</span></span>
<span class="line"><span>Common Name (eg, YOUR name) []:squire.ducklington.org</span></span>
<span class="line"><span>Email Address []:squire@ducklington.org</span></span></code></pre></div><p>“Common Name”一定要是你的域名，然后在nginx.conf中设置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen       443;</span></span>
<span class="line"><span>    server_name  yourdomain;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    ssl                  on;</span></span>
<span class="line"><span>    ssl_certificate      nginx.pem;</span></span>
<span class="line"><span>    ssl_certificate_key  nginx.key;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    ssl_session_timeout  5m;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    ssl_protocols  SSLv2 SSLv3 TLSv1;</span></span>
<span class="line"><span>    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers   on;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    add_header      Front-End-Https on;</span></span>
<span class="line"><span>    root /xxx;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        rewrite ^ http://$host$request_uri permanent;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    location /wp-admin {</span></span>
<span class="line"><span>        fastcgi_pass unix:/tmp/php-fpm.sock;</span></span>
<span class="line"><span>        fastcgi_index index.php;</span></span>
<span class="line"><span>        include fastcgi.conf;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    location ~.*\\.(php|php5)?$ {</span></span>
<span class="line"><span>        fastcgi_pass unix:/tmp/php-fpm.sock;</span></span>
<span class="line"><span>        fastcgi_index index.php;</span></span>
<span class="line"><span>        include fastcgi.conf;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>#下面是80端口vhost中的</span></span>
<span class="line"><span>rewrite ^/wp-login.php(.*) https://$host/wp-login.php$1 permanent;</span></span>
<span class="line"><span>location ~ ^/(wp-admin)/* {</span></span>
<span class="line"><span>    rewrite ^/(.*) https://$host/$1 permanent;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>然后重新加载nginx应该就可以ssl登录了。</p><p>当然了，我遇到个问题，就是https获取css文件，返回的MIME类型为text/html。如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Resource interpreted as Stylesheet but transferred with MIME type text/html: &quot;https://blog.ueder.info/wp-admin/css/wp-admin.css?ver=3.4.1&quot;. </span></span>
<span class="line"><span>Resource interpreted as Stylesheet but transferred with MIME type text/html: &quot;https://blog.ueder.info/wp-admin/css/colors-fresh.css?ver=3.4.1&quot;.</span></span></code></pre></div><p>出错原因在于：上面的conf文件中location /wp-admin，将所有请求都传给fastcgi_pass处理了，php cgi中始终返回text/html，所以修改conf文件后，css、js文件nginx来处理就解决问题了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen       443;</span></span>
<span class="line"><span>    server_name  yourdomain;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ssl                  on;</span></span>
<span class="line"><span>    ssl_certificate      nginx.pem;</span></span>
<span class="line"><span>    ssl_certificate_key  nginx.key;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ssl_session_timeout  5m;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    ssl_protocols  SSLv2 SSLv3 TLSv1;</span></span>
<span class="line"><span>    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers   on;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    add_header      Front-End-Https on;</span></span>
<span class="line"><span>    root /xxx;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    set $rewriteHttp &quot;yes&quot;;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        if ($request_uri ~* ^/wp-login.php) {</span></span>
<span class="line"><span>            set $rewriteHttp &quot;no&quot;;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        if ($request_uri ~* ^/wp-admin) {</span></span>
<span class="line"><span>            set $rewriteHttp &quot;no&quot;;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        if ($rewriteHttp ~ ^yes$) {</span></span>
<span class="line"><span>            rewrite ^ http://$host$request_uri permanent;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        index index.html index.htm index.php;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    location ~.*\\.(php|php5)?$ {</span></span>
<span class="line"><span>        fastcgi_pass unix:/tmp/php-fpm.sock;</span></span>
<span class="line"><span>        fastcgi_index index.php;</span></span>
<span class="line"><span>        include fastcgi.conf;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>参考资料：</p><p>1、<a href="http://library.linode.com/web-servers/nginx/configuration/ssl" title="SSL Certificates with Nginx" target="_blank" rel="noreferrer">SSL Certificates with Nginx</a></p><p>2、<a href="http://codex.wordpress.org/Administration_Over_SSL" title="Administration Over SSL" target="_blank" rel="noreferrer">Administration Over SSL</a></p>`,33),o=[r];function c(h,d,g,u,m,k){return a(),n("div",null,o)}const w=s(l,[["render",c]]);export{f as __pageData,w as default};
